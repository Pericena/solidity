const { ethers } = require("hardhat");

// Cargar las direcciones de los contratos desplegados
const addresses = require('../deployed-addresses.json');

async function main() {
    console.log("üîó Conectando a contratos desplegados...");
    
    const [deployer, user1, user2] = await ethers.getSigners();
    
    // Conectar a los contratos
    const dappToken = await ethers.getContractAt("DAppToken", addresses.dappToken);
    const lpToken = await ethers.getContractAt("LPToken", addresses.lpToken);
    const tokenFarm = await ethers.getContractAt("TokenFarm", addresses.tokenFarm);
    
    console.log("‚úÖ Contratos conectados");
    
    // Ejemplo de interacci√≥n
    console.log("\n" + "=".repeat(50));
    console.log("üìä ESTADO ACTUAL DE LOS CONTRATOS");
    console.log("=".repeat(50));
    
    // Informaci√≥n del TokenFarm
    console.log("üè™ TokenFarm:");
    console.log("   ‚Ä¢ Nombre:", await tokenFarm.name());
    console.log("   ‚Ä¢ Owner:", await tokenFarm.owner());
    console.log("   ‚Ä¢ Reward per block:", ethers.formatEther(await tokenFarm.rewardPerBlock()));
    console.log("   ‚Ä¢ Fee percentage:", await tokenFarm.feePercentage() / 100 + "%");
    console.log("   ‚Ä¢ Total staking balance:", ethers.formatEther(await tokenFarm.totalStakingBalance()));
    
    const [currentFee, maxFee, collectedFees] = await tokenFarm.getFeeInfo();
    console.log("   ‚Ä¢ Collected fees:", ethers.formatEther(collectedFees));
    
    // Balances
    console.log("\nüí∞ Balances:");
    console.log("   ‚Ä¢ Deployer LP tokens:", ethers.formatEther(await lpToken.balanceOf(deployer.address)));
    console.log("   ‚Ä¢ Deployer DAPP tokens:", ethers.formatEther(await dappToken.balanceOf(deployer.address)));
    
    console.log("\n" + "=".repeat(50));
    console.log("üß™ EJEMPLO DE INTERACCI√ìN");
    console.log("=".repeat(50));
    
    // Ejemplo: Hacer staking
    const stakeAmount = ethers.parseEther("100");
    
    console.log("\n1Ô∏è‚É£ Aprobando LP tokens para staking...");
    await lpToken.approve(addresses.tokenFarm, stakeAmount);
    console.log("   ‚úÖ Aprobaci√≥n completada");
    
    console.log("\n2Ô∏è‚É£ Haciendo staking de", ethers.formatEther(stakeAmount), "LP tokens...");
    const depositTx = await tokenFarm.deposit(stakeAmount);
    await depositTx.wait();
    console.log("   ‚úÖ Staking completado");
    
    // Verificar estado despu√©s del staking
    const userInfo = await tokenFarm.userInfo(deployer.address);
    console.log("\nüìà Estado despu√©s del staking:");
    console.log("   ‚Ä¢ Staking balance:", ethers.formatEther(userInfo.stakingBalance));
    console.log("   ‚Ä¢ Is staking:", userInfo.isStaking);
    console.log("   ‚Ä¢ Total staking balance:", ethers.formatEther(await tokenFarm.totalStakingBalance()));
    
    // Simular algunos bloques y distribuir recompensas
    console.log("\n3Ô∏è‚É£ Simulando tiempo (minando 10 bloques)...");
    for (let i = 0; i < 10; i++) {
        await ethers.provider.send("evm_mine");
    }
    console.log("   ‚úÖ Bloques minados");
    
    console.log("\n4Ô∏è‚É£ Distribuyendo recompensas...");
    const distributeTx = await tokenFarm.distributeRewardsAll();
    await distributeTx.wait();
    console.log("   ‚úÖ Recompensas distribuidas");
    
    // Verificar recompensas pendientes
    const updatedUserInfo = await tokenFarm.userInfo(deployer.address);
    console.log("\nüéÅ Recompensas pendientes:", ethers.formatEther(updatedUserInfo.pendingRewards));
    
    // Calcular fee que se cobrar√≠a
    const [fee, netAmount] = await tokenFarm.calculateFee(updatedUserInfo.pendingRewards);
    console.log("   ‚Ä¢ Fee que se cobrar√≠a:", ethers.formatEther(fee));
    console.log("   ‚Ä¢ Cantidad neta a recibir:", ethers.formatEther(netAmount));
    
    console.log("\n5Ô∏è‚É£ Reclamando recompensas...");
    const claimTx = await tokenFarm.claimRewards();
    await claimTx.wait();
    console.log("   ‚úÖ Recompensas reclamadas");
    
    // Estado final
    console.log("\nüìä Estado final:");
    console.log("   ‚Ä¢ DAPP tokens del deployer:", ethers.formatEther(await dappToken.balanceOf(deployer.address)));
    const finalFeeInfo = await tokenFarm.getFeeInfo();
    console.log("   ‚Ä¢ Fees recolectados:", ethers.formatEther(finalFeeInfo[2]));
    
    console.log("\n" + "=".repeat(50));
    console.log("üéâ ¬°INTERACCI√ìN COMPLETADA!");
    console.log("=".repeat(50));
    console.log("üí° Pr√≥ximos pasos que puedes probar:");
    console.log("   ‚Ä¢ Cambiar reward per block: tokenFarm.setRewardPerBlock()");
    console.log("   ‚Ä¢ Cambiar fee percentage: tokenFarm.setFeePercentage()");
    console.log("   ‚Ä¢ Retirar fees: tokenFarm.withdrawFees()");
    console.log("   ‚Ä¢ Hacer withdraw: tokenFarm.withdraw()");
    console.log("   ‚Ä¢ Agregar m√°s usuarios para testing");
}

main()
    .then(() => process.exit(0))
    .catch((error) => {
        console.error("‚ùå Error en la interacci√≥n:", error);
        process.exit(1);
    });
